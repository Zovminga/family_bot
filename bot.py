#!/usr/bin/env python3
import os
from datetime import datetime
from dateutil import parser as dparser

import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler, ContextTypes
)
from dotenv import load_dotenv
load_dotenv()

# ---------- Google Sheets ----------
def open_sheet(sheet_name="Data"):
    scope = ["https://www.googleapis.com/auth/drive",
             "https://www.googleapis.com/auth/spreadsheets"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(
        os.getenv("GOOGLE_CREDS_PATH"), scope
    )
    gc = gspread.authorize(creds)
    sh = gc.open(os.getenv("SHEET_NAME"))
    return sh.worksheet(sheet_name)


def load_categories() -> list[str]:
    """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ A –ª–∏—Å—Ç–∞ Config."""
    cfg_ws = open_sheet("Config")              # ‚Üê –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–ø–∏—Å–æ–∫
    col = cfg_ws.col_values(1)                 # A:A
    col = [c.strip() for c in col if c.strip()]   # —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
    return col[1:] if len(col) > 1 else []     # –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫


sheet = open_sheet()

# ---------- Bot constants ----------
CATS = load_categories()
if not CATS:
    raise RuntimeError("–õ–∏—Å—Ç Config –ø—É—Å—Ç ‚Äì –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±–æ—Ç–∞")
CURS = ["RUB", "RSD", "EUR"]
MONTH_FMT = "%Y-%m"
DATE_FMT = "%d.%m.%Y"
SPENDERS = ["–õ–∏–∑–∞", "–ê–∑–∞—Ç"]
(
    CHOOSE_ACTION, CHOOSE_CAT, TYPING_AMT, CHOOSE_CUR,
    CHOOSE_SPENDER, TYPING_CMNT,
    CHOOSE_DT, TYPING_DT,
    STAT_CAT, STAT_MON
) = range(10)


# -------- Helpers ----------
def month_of(date_str: str) -> str:
    return datetime.strptime(date_str, DATE_FMT).strftime(MONTH_FMT)


def sheet_append(row):
    sheet.append_row(row, value_input_option="USER_ENTERED")


def compute_stats(cat, month):
    df = pd.DataFrame(sheet.get_all_records())
    df = df[df["Month"] == month]
    if cat != "–í—Å–µ":
        df = df[df["Category"] == cat]
    total = df.groupby("Currency")["Amount"].sum()
    lines = [f"{cur}: {amt:,.2f}" for cur, amt in total.items()]
    return "\n".join(lines) if lines else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ü§∑‚Äç‚ôÇÔ∏è"


# ---------- Conversation steps ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [["–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"], ["–û—Ç–º–µ–Ω–∞"]]

    # message –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª CallbackQuery
    if update.message:
        target = update.message          # –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        target = update.callback_query.message  # —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∫–ª–∏–∫–Ω—É–ª–∏

    await target.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )
    return CHOOSE_ACTION


async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û–∫–µ–π, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ üôÇ")
        return await start(update, context)
    text = update.message.text
    if text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É":
        kb = [[c] for c in CATS]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
        )
        return CHOOSE_CAT
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        kb = [[c] for c in ["–í—Å–µ"] + CATS]
        await update.message.reply_text(
            "–ü–æ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
        )
        return STAT_CAT
    else:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üòâ")
        return CHOOSE_ACTION


# ----- Add expense flow -----
async def choose_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["cat"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    return TYPING_AMT


async def type_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amt = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑:")
        return TYPING_AMT
    context.user_data["amt"] = amt
    kb = [[c] for c in CURS]
    await update.message.reply_text("–í–∞–ª—é—Ç–∞?", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True))
    return CHOOSE_CUR


async def choose_cur(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["cur"] = update.message.text
    buttons = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today"),
         InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É", callback_data="custom")]
    ]
    await update.message.reply_text("–î–∞—Ç–∞ —Ç—Ä–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(buttons))
    return CHOOSE_DT


async def choose_dt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "today":
        date_str = datetime.now().strftime(DATE_FMT)
        await save_row(update, context, date_str)
        return CHOOSE_ACTION
    else:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
        return TYPING_DT


async def type_dt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_str = dparser.parse(update.message.text, dayfirst=True).strftime(DATE_FMT)
    except Exception:
        await update.message.reply_text("–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ 13.07.2025")
        return TYPING_DT
    await save_row(update, context, date_str)
    return CHOOSE_ACTION

async def save_row(update: Update, context: ContextTypes.DEFAULT_TYPE, date_str: str):
    month_str = month_of(date_str)
    cat = context.user_data["cat"]
    amt = context.user_data["amt"]
    cur = context.user_data["cur"]
    who = context.user_data["spender"]
    cmnt = context.user_data.get("comment", "")
    sheet_append([date_str, month_str, cat, amt, cur, who, cmnt])

    text = f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: {cat} ‚Äì {amt:.2f} {cur} –∑–∞ {date_str}"
    if update.callback_query:
        await update.callback_query.edit_message_text(text)
    else:
        await update.message.reply_text(text)

    # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(update, context)

def start_over(update, context):
    return CHOOSE_ACTION

# ----- Stats flow -----
async def stat_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["stat_cat"] = update.message.text
    # —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 12 –º–µ—Å—è—Ü–µ–≤
    now = datetime.now()
    months = [(now.replace(day=1) - pd.DateOffset(months=i)).strftime(MONTH_FMT) for i in range(12)]
    kb = [[m] for m in months]
    await update.message.reply_text("–ó–∞ –∫–∞–∫–æ–π –º–µ—Å—è—Ü?", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True))
    return STAT_MON

async def stat_mon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    month = update.message.text
    cat = context.user_data["stat_cat"]
    stats = compute_stats(cat, month)
    await update.message.reply_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è {cat}:\n{stats}")
    return start_over(update, context)


async def reload_cats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CATS
    CATS = load_categories()
    text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n{', '.join(CATS) if CATS else '–ø—É—Å—Ç–æ'}"
    await update.message.reply_text(text)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è.
    """
    context.user_data.clear()          # –æ—á–∏—â–∞–µ–º –≤—Å—ë –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ? üôÇ"
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ –∏ –≤ start()
    kb = [["–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"], ["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )
    return CHOOSE_ACTION


async def choose_cur(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["cur"] = update.message.text
    kb = [[s] for s in SPENDERS]
    await update.message.reply_text(
        "–ö—Ç–æ –≤–Ω–µ—Å —Ç—Ä–∞—Ç—É?", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSE_SPENDER


async def choose_spender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["spender"] = update.message.text
    buttons = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")]
    ]
    await update.message.reply_text(
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return TYPING_CMNT


async def type_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update, Update) and update.callback_query:
        # –ù–∞–∂–∞–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª
        await update.callback_query.answer()
        context.user_data["comment"] = ""
    else:
        context.user_data["comment"] = update.message.text
    # –¥–∞–ª–µ–µ –≤—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É
    buttons = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today"),
         InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É", callback_data="custom")]
    ]
    await update.effective_message.reply_text("–î–∞—Ç–∞ —Ç—Ä–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(buttons))
    return CHOOSE_DT


# ---------- Main ----------
def main():
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_action)],
            CHOOSE_CAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_cat)],
            TYPING_AMT: [MessageHandler(filters.TEXT & ~filters.COMMAND, type_amount)],
            CHOOSE_CUR: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_cur)],
            CHOOSE_SPENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_spender)],
            TYPING_CMNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, type_comment),
                CallbackQueryHandler(type_comment, pattern="^skip$")
            ],
            CHOOSE_DT: [CallbackQueryHandler(choose_dt)],
            TYPING_DT: [MessageHandler(filters.TEXT & ~filters.COMMAND, type_dt)],
            STAT_CAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, stat_cat)],
            STAT_MON: [MessageHandler(filters.TEXT & ~filters.COMMAND, stat_mon)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),  # ‚Üê –±—ã–ª–æ start
            CommandHandler("stop", cancel),  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
        ],
        allow_reentry=True,
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("stop", cancel))
    app.add_handler(CommandHandler("reloadcats", reload_cats))
    app.run_polling()


if __name__ == "__main__":
    main()
